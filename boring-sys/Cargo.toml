[package]
name = "rama-boring-sys"
version = { workspace = true }
authors = [
    "Alex Crichton <alex@alexcrichton.com>",
    "Steven Fackler <sfackler@gmail.com>",
    "Ivan Nikulin <ifaaan@gmail.com>",
    "Glen De Cauwsemaecker <glen@plabayo.tech>",
]
license = "MIT"
description = "FFI bindings to BoringSSL for Rama"
repository = { workspace = true }
documentation = "https://docs.rs/rama-boring-sys"
links = "boringssl"
build = "build/main.rs"
readme = "README.md"
categories = ["cryptography", "external-ffi-bindings"]
edition = { workspace = true }
include = [
    "/*.md",
    "/*.toml",
    "/LICENSE-MIT",
    "/cmake/*.cmake",
    # boringssl (non-FIPS)
    "/deps/boringssl/src/util/32-bit-toolchain.cmake",
    "/deps/boringssl/**/*.[chS]",
    "/deps/boringssl/**/*.asm",
    "/deps/boringssl/sources.json",
    "/deps/boringssl/src/crypto/obj/obj_mac.num",
    "/deps/boringssl/src/crypto/obj/objects.txt",
    "/deps/boringssl/**/*.bzl",
    "/deps/boringssl/src/**/*.cc",
    "/deps/boringssl/**/CMakeLists.txt",
    "/deps/boringssl/**/sources.cmake",
    "/deps/boringssl/LICENSE",
    "/build/*",
    "/src",
    "/patches",
]

[package.metadata.docs.rs]
features = ["rpk", "pq-experimental", "underscore-wildcards"]
rustdoc-args = ["--cfg", "docsrs"]

[features]

# Enables Raw public key API (https://datatracker.ietf.org/doc/html/rfc7250)
rpk = []

# Applies a patch (`patches/boring-pq.patch`) to the boringSSL source code that
# enables support for PQ key exchange. This feature is necessary in order to
# compile the bindings for the default branch of boringSSL (`deps/boringssl`).
# Alternatively, a version of boringSSL that implements the same feature set
# can be provided by setting `BORING_BSSL{,_FIPS}_SOURCE_PATH`.
pq-experimental = []

# Applies a patch (`patches/underscore-wildcards.patch`) to enable
# `ffi::X509_CHECK_FLAG_UNDERSCORE_WILDCARDS`. Same caveats as
# those for `pq-experimental` feature apply.
underscore-wildcards = []

[build-dependencies]
autocfg = { workspace = true }
bindgen = { workspace = true }
cmake = { workspace = true }
fs_extra = { workspace = true }
fslock = { workspace = true }

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(const_fn)'] }
